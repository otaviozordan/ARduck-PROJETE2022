//Pinos do NodeMCU
// SDA => D1 (GPIO5)
// SCL => D2 (GPIO4)

//Bibliotecas para uso do OLED
#include <Wire.h>
#include "SSD1306Wire.h"

//Criação do objeto para o display OLED
SSD1306Wire  display(0x3c, 5, 4);

void iniciarOLED(){
  display.init();
  display.flipScreenVertically();
}

/*
#define Duck_Logo_width 48
#define Duck_Logo_height 48
const uint8_t PROGMEM Duck_icon = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFE, 0xFE, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0x70,
0x00, 0xC0, 0xE0, 0xF8, 0xF8, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
0x7F, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define WiFi_Logo_width 48
#define WiFi_Logo_height 48
const uint8_t PROGMEM Wifi_icon = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0x7F, 0x3F, 0x3F, 0x1F, 0x1F, 0x1F,
0x0F, 0x0F, 0x8F, 0x8F, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x8F, 0x8F, 0x0F, 0x0F,
0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x7F, 0xFE, 0xFC, 0xFC, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x00,
0x00, 0x01, 0x03, 0x07, 0x07, 0x07, 0x03, 0x01, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFE, 0x7E, 0x7F,
0x3F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F,
0x7F, 0x7E, 0xFE, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0x01, 0x03, 0x07, 0x07, 0x07, 0x03, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x01, 0x00, 0xF0, 0xF8,
0xFC, 0xFC, 0xFE, 0x7E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7E, 0xFE, 0xFC, 0xFC,
0xF8, 0xF0, 0x00, 0x01, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x01, 0x01, 0x00, 0x00, 0x00, 0x78, 0xFC, 0xFC, 0xFC, 0xFC, 0x78, 0x00, 0x00, 0x00, 0x01, 0x01,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
*/

void draw_telainicial()
{
  //Apaga o display
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  //Seleciona a fonte
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 10, "Projete 2022");
  display.drawString(63, 26, "ARduck");
  display.drawString(63, 45, "Iniciando...");
  display.display();
  delay(3000);
}

void draw_conectando(String ssid_stg)
{
  //Mostra que o ESP está conectando ao WiFi
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  //Seleciona a fonte
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 10, "Conectando");
  display.drawString(63, 26, "a rede:");
  display.setFont(ArialMT_Plain_10);
  display.drawString(63, 45, ssid_stg);
  display.display();
  delay(500);
}

void draw_conectado(){
  //Mostra que o ESP está conectado ao WiFi
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  //Seleciona a fonte
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 16, "Conectado");
  display.setFont(ArialMT_Plain_10);
  display.drawString(63, 45, ssid);
  display.display();
  delay(3000);
  display.clear();
}

void draw_ip(String ip_stg){
 display.clear();
 display.setTextAlignment(TEXT_ALIGN_CENTER);
 display.setFont(ArialMT_Plain_16);
 display.drawString(63, 7, "ARduck");
 display.drawString(63, 26, "Endereço IP:");
 display.drawString(63, 45, ip_stg);
 display.display();
 delay(3000);
}

void draw_espera(){
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 7, "ARduck");
  display.drawString(63, 26, "Inicie o desafio e");
  display.setFont(ArialMT_Plain_10);
  display.drawString(63, 45, "aperte o botão para medir");
  display.display();
  delay(800);
  display.clear();
  display.display();
  delay(200);
}

void draw_verificandoEstado(){
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 7, "ARduck");
  display.drawString(63, 26, "Conectando ao");
  display.drawString(63, 45, "Servidor");
  display.display();
  delay(1000);
}

void draw_response(bool status, int httpCode){
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 7, "ARduck");
  display.drawString(63, 26, "Servidor");
  display.drawString(63, 45,  String(status ? "  " : " não ") + "está ativo");
  display.display();
  delay(1000);
  if(httpCode != 200){
    display.clear();
    display.setTextAlignment(TEXT_ALIGN_CENTER);
    display.setFont(ArialMT_Plain_16);
    display.drawString(63, 7, "ARduck");
    display.drawString(63, 26, "Código de erro:");
    display.drawString(63, 45, String(httpCode));
    display.display();
    delay(3000);
  }
}

void draw_medindoTensao(){
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 7, "ARduck");
  display.drawString(63, 26, "Medindo tensão");
  display.drawString(63, 45, "do circuito");
  display.display();
  delay(2500);
}

void draw_tensao(int tensao){
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 7, "ARduck");
  display.drawString(63, 26, "Tensão medida:");
  String tensao_str = String(tensao) + "mV";
  display.drawString(63, 45, tensao_str);
  display.display();
  delay(4000);
}

void draw_enviandoDados(int httpcode){
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 7, "ARduck");
  display.drawString(63, 26, "Enviando dados");
  display.drawString(63, 45, "ao servidor");
  display.display();
  delay(2000);
  display.clear();

  if (httpcode == 200){
    display.setTextAlignment(TEXT_ALIGN_CENTER);
    display.setFont(ArialMT_Plain_16);
    display.drawString(63, 7, "ARduck");
    display.drawString(63, 26, "Dados enviados");
    display.drawString(63, 45, "com sucesso");
    display.display();
    delay(3000);
    display.clear();
  }
  else{
    display.setTextAlignment(TEXT_ALIGN_CENTER);
    display.setFont(ArialMT_Plain_16);
    display.drawString(63, 7, "ARduck");
    display.drawString(63, 26, "Erro ao enviar");
    display.drawString(63, 45, "dados ao servidor");
    display.display();
    delay(3000);
    display.clear();
    display.drawString(63, 7, "ARduck");
    display.drawString(63, 26, "Código de erro:");
    display.drawString(63, 45, String(httpcode));
    display.display();
    delay(3000);
    display.clear();
  }
}

void draw_servidorInativo(){
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 7, "ARduck");
  display.drawString(63, 26, "Servidor");
  display.drawString(63, 45, "inativo");
  display.display();
  delay(3000);
}

void draw_modoEspera(){
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 7, "ARduck");
  display.drawString(63, 26, "Inicie esta missão");
  display.drawString(63, 45, "No Aplicativo");
  display.display();
  delay(1000);
}

void draw_cancelar(){
  display.clear();
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.setFont(ArialMT_Plain_16);
  display.drawString(63, 7, "ARduck");
  display.drawString(63, 26, "Cancelando");
  display.drawString(63, 45, "missão");
  display.display();
  delay(200);
}
